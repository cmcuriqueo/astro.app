---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description">
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="view-transition" content="same-origin" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>

	@keyframes fade-in {
	from { opacity: 0; }
	}

	@keyframes fade-out {
	to { opacity: 0; }
	}

	@keyframes slide-from-right {
	from { transform: translateX(30px); }
	}

	@keyframes slide-to-left {
	to { transform: translateX(-30px); }
	}

	::view-transition-old(root) {
	animation: 90ms cubic-bezier(0.4, 0, 1, 1) both fade-out,
		300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
	}

	::view-transition-new(root) {
	animation: 210ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,
		300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;
	}
</style>
<script>

	if(document.startViewTransition) {
		window.navigation.addEventListener('navigate', (event) => {
			console.log(event.destination.url);
			const toUrl = new URL(event.destination.url);
			
			if(location.origin != toUrl.origin) return;

			event.intercept({
				async handler () {
					//vamos a cargar el contenido de la pagina 
					//utilizando un fetch para obtener el html
					const response = await fetch(toUrl.pathname);
					const html = await response.text();

					const [,data] = html.match(/<body[^>]*>([\s\S]*)<\/body>/i);

					document.startViewTransition(() => {
						document.body.innerHTML = data;
						document.documentElement.scrollTop = 0;
					})

				}
			}) 


		});
	}	
	
</script> 